// <auto-generated />
using System;
using DiveSpecies.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace DiveSpecies.Infrastructure.persistence.migrations
{
    [DbContext(typeof(DiveSpeciesDbContext))]
    partial class DiveSpeciesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DangerousFeedSpecies", b =>
                {
                    b.Property<int>("DangerousFeedsDangerousFeedId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("DangerousFeedsDangerousFeedId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("DangerousFeedSpecies");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.DangerousFeed", b =>
                {
                    b.Property<int>("DangerousFeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DangerousFeedId"), 1L, 1);

                    b.Property<MultiPolygon>("Area")
                        .HasColumnType("geography");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DangerousFeedExposedId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DepthEndInMeter")
                        .HasColumnType("float");

                    b.Property<double?>("DepthStartInMeter")
                        .HasColumnType("float");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OccuresAtFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OccuresAtTill")
                        .HasColumnType("datetime2");

                    b.HasKey("DangerousFeedId");

                    b.HasIndex("DangerousFeedId")
                        .IsUnique();

                    b.ToTable("DangerousFeeds");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Dive", b =>
                {
                    b.Property<int>("DiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiveId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiveExposedId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserExposedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiveId");

                    b.ToTable("Dives");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Sighting", b =>
                {
                    b.Property<int>("SightingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SightingId"), 1L, 1);

                    b.Property<MultiPolygon>("Area")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DepthEndInMeter")
                        .HasColumnType("float");

                    b.Property<double?>("DepthStartInMeter")
                        .HasColumnType("float");

                    b.Property<int>("DiveId")
                        .HasColumnType("int");

                    b.Property<double>("DiveIntoInMinutes")
                        .HasColumnType("float");

                    b.Property<string>("SightingExposedId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SightingId");

                    b.HasIndex("DiveId");

                    b.HasIndex("SightingExposedId")
                        .IsUnique();

                    b.HasIndex("SpeciesId");

                    b.ToTable("Sightings");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SightingImage", b =>
                {
                    b.Property<int>("SightingImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SightingImageId"), 1L, 1);

                    b.Property<int>("SightingId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SightingImageId");

                    b.HasIndex("SightingId");

                    b.ToTable("SightingImage");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Species", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OccuresIn")
                        .HasColumnType("int");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<string>("SpeciesExposedId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeciesTypeId")
                        .HasColumnType("int");

                    b.HasKey("SpeciesId");

                    b.HasIndex("SpeciesId")
                        .IsUnique();

                    b.HasIndex("SpeciesTypeId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SpeciesImage", b =>
                {
                    b.Property<int>("SpeciesImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesImageId"), 1L, 1);

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeciesImageId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("SpeciesImage");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SpeciesOccuresAt", b =>
                {
                    b.Property<int>("SpeciesOccuresAtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesOccuresAtId"), 1L, 1);

                    b.Property<Polygon>("Area")
                        .HasColumnType("geography");

                    b.Property<double?>("DepthEndInMeter")
                        .HasColumnType("float");

                    b.Property<double?>("DepthStartInMeter")
                        .HasColumnType("float");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("SpeciesOccuresAtId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("SpeciesOccuresAt");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SpeciesSearchHistory", b =>
                {
                    b.Property<int>("SpeciesSearchHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesSearchHistoryId"), 1L, 1);

                    b.Property<MultiPolygon>("Area")
                        .HasColumnType("geography");

                    b.Property<double?>("DepthEndInMeter")
                        .HasColumnType("float");

                    b.Property<double?>("DepthStartInMeter")
                        .HasColumnType("float");

                    b.Property<int?>("OccuresIn")
                        .HasColumnType("int");

                    b.Property<int?>("Population")
                        .HasColumnType("int");

                    b.Property<int?>("PopulationOperator")
                        .HasColumnType("int");

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<bool>("SortDesc")
                        .HasColumnType("bit");

                    b.Property<int?>("SpeciesTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserExposedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeciesSearchHistoryId");

                    b.ToTable("SpeciesSearchHistory");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SpeciesTypeType", b =>
                {
                    b.Property<int>("SpeciesTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpeciesTypeId");

                    b.ToTable("SpeciesTypes");
                });

            modelBuilder.Entity("DangerousFeedSpecies", b =>
                {
                    b.HasOne("DiveSpecies.Domain.Entities.DangerousFeed", null)
                        .WithMany()
                        .HasForeignKey("DangerousFeedsDangerousFeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiveSpecies.Domain.Entities.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Sighting", b =>
                {
                    b.HasOne("DiveSpecies.Domain.Entities.Dive", "Dive")
                        .WithMany("Sightings")
                        .HasForeignKey("DiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiveSpecies.Domain.Entities.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dive");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SightingImage", b =>
                {
                    b.HasOne("DiveSpecies.Domain.Entities.Sighting", "Sighting")
                        .WithMany("SightingImages")
                        .HasForeignKey("SightingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sighting");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Species", b =>
                {
                    b.HasOne("DiveSpecies.Domain.Entities.SpeciesTypeType", "SpeciesType")
                        .WithMany("Species")
                        .HasForeignKey("SpeciesTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SpeciesType");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SpeciesImage", b =>
                {
                    b.HasOne("DiveSpecies.Domain.Entities.Species", "Species")
                        .WithMany("SpeciesImages")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SpeciesOccuresAt", b =>
                {
                    b.HasOne("DiveSpecies.Domain.Entities.Species", "Species")
                        .WithMany("OccuresAt")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Dive", b =>
                {
                    b.Navigation("Sightings");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Sighting", b =>
                {
                    b.Navigation("SightingImages");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.Species", b =>
                {
                    b.Navigation("OccuresAt");

                    b.Navigation("SpeciesImages");
                });

            modelBuilder.Entity("DiveSpecies.Domain.Entities.SpeciesTypeType", b =>
                {
                    b.Navigation("Species");
                });
#pragma warning restore 612, 618
        }
    }
}
